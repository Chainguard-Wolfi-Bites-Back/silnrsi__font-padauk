# An extension of the autogenerated padaukbookbold.fea
# To fix autogenerated GPOS lookups
# To add GPOS lookups that can't easily be autogenerated

# Include GSUB lookups here - because FontForge expects it here
# This lets us work on kerning and adjusting distances with ligatures
# that have been formed in GSUB

include(../font-source/padauk-mym2_GSUB.fea)


# -------------
# GPOS lookups
# -------------

# --- NOTE on 103C and variants ----------------------------------------
# The source fonts have u103C and variants classed as base glyphs. 
# I have classified them as marks in the GDEF table. 
# They need to be mark glyphs so they can ligate with u102F and u1030 
# across a base glyph (remember u103C is reordered before lookups 
# are applied. Since OTLS zeros out the width of marks, 
# *now they need advance width added* which we do here.

# NB: The autogenerated files have them in the GPOS lookups as base 
# glyphs which generates a non-fatal (glyph order) error.

# 2015-04-04, I tried changing u103C and related glyphs to marks in the 
# source but it kept corrupting the font so I just changed it in the 
# GDEF table. (See padauk_features.fea)
#-----------------------------------------------------------------------


# Adding advanced width for spacing marks
lookup dist_SpacingMarks {
  lookupflag 0;
    pos u103C <0 0 234 0>;
    pos u103C.alt.narr <0 0 234 0>;
    pos u103C.alt.wide <0 0 234 0>;
    pos u103C.wide <0 0 234 0>;
    pos u103C_u103D.narr <0 0 234 0>;
    pos u103C_u103D.wide <0 0 234 0>;
    pos u103C_u103D.alt.narr <0 0 234 0>;
    pos u103C_u103D.alt.wide <0 0 234 0>;
    pos u103C_u102F.narr <0 0 234 0>;
    pos u103C_u102F.wide <0 0 234 0>;
    pos u103C_u102F.alt.narr <0 0 234 0>;
    pos u103C_u102F.alt.wide <0 0 234 0>;
    pos u103C_u103D.alt.narr.tri <0 0 234 0>;
    pos u103C_u103D.alt.wide.tri <0 0 234 0>;
    pos u103C_u103D.narr.tri <0 0 234 0>;
    pos u103C_u103D.wide.tri <0 0 234 0>;
    # Glyph u1062 classified as mark in GDEF for Shan 
    # so a u1086 coming after u1062 can ignore u1062 and attach to cons
    pos u1062 <0 0 333 0>; 
    # Sneak this in here for Shan - #3334
    # Rendering engines apparently don't recognize this letter *yet* so this rule
    # may need to be removed later. Diacritic attachment not happening either.
    pos u1081 <0 0 579 0>; 
} dist_SpacingMarks; 

# Normally u1037 attaches to u103D or u102F. But when the latter two
# become part of a 103C ligature, they become reordered before a 
# consonant and the attachment breaks. (I've had no luck in fixing it.) 
# This 'hack' gets it close to where it should be.
### NB: Some configurations and advance width still need to be adjusted
lookup kern_103Clig_1037 {
  lookupflag 0;
    pos u103C_u103D.narr [@cCons] [@cUDia] u1037' <332 0 0 0>;
    pos u103C_u103D.narr [@cCons]          u1037' <332 0 169 0>;
#    pos u103C_u103D.wide [@cCons] [@cUDia] u1037' <0 0 0 0>;
#    pos u103C_u103D.wide [@cCons]          u1037' <0 0 0 0>;
#    pos u103C_u103D.alt.narr [@cCons] [@cUDia] u1037' <0 0 0 0>;
#    pos u103C_u103D.alt.narr [@cCons]          u1037' <0 0 0 0>;
#    pos u103C_u103D.alt.wide [@cCons] [@cUDia] u1037' <0 0 0 0>;
#    pos u103C_u103D.alt.wide [@cCons]          u1037' <0 0 0 0>;
    pos u103C_u102F.narr [@cCons] [@cUDia] u1037' <315 0 153 0>;
    pos u103C_u102F.narr [@cCons]          u1037' <315 0 0 0>;
#    pos u103C_u102F.wide [@cCons] [@cUDia] u1037' <0 0 0 0>;
#    pos u103C_u102F.wide [@cCons]          u1037' <0 0 0 0>;
    pos u103C_u102F.alt.narr [@cCons] [@cUDia] u1037' <315 0 153 0>;
    pos u103C_u102F.alt.narr [@cCons]          u1037' <315 0 0 0>;
    pos u103C_u102F.alt.wide [@cCons] [@cUDia] u1037' <309 0 150 0>;
    pos u103C_u102F.alt.wide [@cCons]          u1037' <309 0 0 0>;
} kern_103Clig_1037;

# Additional dist needed for some cons to clear 103C
@class103CConsNarr_05 = [u1001 ]; # alt.narr with/without 102E, BOTHlig.alt.narr with/without 102D
@class103CConsNarr_13 = [u1004 ]; # alt.narr , lig.alt.narr with/without 102D
@class103CConsNarr_47 = [u1012 ]; # 
@class103CConsWide_05 = [u1010 ]; # 
@class103CConsWide_25 = [u1000 ]; # 
# Need to add a lookup here...


#-----------------------------------------------------------------------
# This section deals with 101B and some lower diacritics

# Adding LSB to ensure that the lower diacritic doesn't protrude 
# backwards into a previous cluster.
# Adding RSB to ensure that the next *base* glyph is spaced correctly
lookup dist_101Balt {
  lookupflag 0;
    pos u101B.alt' <100 0 100 0> u103E_u1030;
    pos u101B.alt' <88 0 88 0>   u103E_u102F;
    pos u101B.alt' <53 0 53 0>   u1030.med;
    pos u101B.alt' <12 0 12 0>   u102F.med;
    # OTLS re-orders marks
    pos u101B.alt' <12 0 12 0>   [u1032 u1036] u102F.med;
} dist_101Balt;

# Since OTLS zeros out the width of marks the width of 101B.alt doesn't
# affect them. We need to explicitly adjust width for them to kern.
lookup kern_101Balt {
  lookupflag 0;
    pos u101B.alt u103E_u1030' <-90 0 0 0>;
    pos u101B.alt u103E_u102F' <-78 0 0 0>;
    pos u101B.alt u1030.med'   <-43 0 0 0>;
    pos u101B.alt u102F.med'   <-2 0 0 0>;
    # OTLS re-orders marks
#    pos u101B.alt [u1032 u1036] u102F.med' <-2 0 0 0>;
} kern_101Balt;

# Not sure why this doesn't work but it's no big deal - only 2 points.
lookup pos_101Balt_1036 {
  lookupflag 0;
    pos u102F.med' <-2 0 0 0>; # OTLS re-orders marks
} pos_101Balt_1036;

lookup kern_101Balt_1036 {
  lookupflag 0;
    pos u101B.alt u1036 u102F.med' lookup pos_101Balt_1036; 
} kern_101Balt_1036;
#-----------------------------------------------------------------------

lookup kern_misc {
  lookupflag 0;
    pos u1002'     135 [u1004.kinzi] u102B;
    pos u1014.alt' 137 [u1010.med]   u102F;
    pos u1014.alt' 153 [u1011.med]   u1014.alt [u1010.med]; # 414
    pos u1014.alt'  35 [u103D]       u1014.alt [u1010.med]; # 1175
    pos u101B'     106 [@cConsNar]  [@cMedWide]; # 2020 2045 ###this needs refining
    pos u1032'     135  u102B; # Mon language plus maybe others
    
    pos u103B           u102D' <148 0 0 0>  u102F;          # Shifts 102D over stem of 103B
    
    pos u103C.alt.narr [u1017 ]' 107 u102D [@cCons]; # 1611
    pos u103C.wide     [@cCons]' 147 u102B;
    pos u103C          [@cCons]' 135 u102B;
    
    pos u1014 u1037'  79 u1063; # KSW (Sgaw Karen) language
    pos u101B u1037' 187 u1063; # KSW (Sgaw Karen) language
    pos u103B u1037' 180 u1063; # KSW (Sgaw Karen) language
    pos u1061 u1037' 180 u1063; # KSW (Sgaw Karen) language
} kern_misc; 

# This is a Mon language sequence
# This sequence can not be reordered easily in OT but this rule works 
# for the all the words I can find. It may need to be refined.
lookup kern_TallAA {
  lookupflag 0;
    pos u102B' <135 0 0 0> u1036' <-341 0 0 0>;
} kern_TallAA;

# Input sequence is u102F u1032 with u1032 attaching at U 
# OTLS reordered the pair so now we kern to make it appear to attach
# Adding 172 to LSB works for many but may need contextual rules for precise placement
# feature disabled
lookup kern_102F_1032 {
  lookupflag 0;
    pos u1032' <197 0 0 0> u102F;
} kern_102F_1032;

# This lookup excluively for KSW (Sgaw Karen) language
# It shifts u1037 to the left of any lower diacritic
@classKSW_LLMark = [u1030.med u1037 u103D u103E.slanth];
lookup kern_KSW_LLMark {
  lookupflag 0;
  pos u1030.med    u1037' <-297 0 0 0>;
  pos u103D.tri    u1037' <-333 0 0 0>;
  pos u103E.slanth u1037' <-250 0 0 0>;
} kern_KSW_LLMark;

# ----------------------------------------------------------------------
# Clean up of advance width
# Make this the last "dist" lookup

@classConsAsat_00 = [u1000 u1005 u100A u1010 u1015 u1019 u101A u1025 u101E ];
@classConsAsat_05 = [u100C u101C ]; # 7
@classConsAsat_10 = [u1004 u100B ]; # 7
@classConsAsat_13 = [u100F ]; # 3
@classConsAsat_19 = [u1012 ]; # 10
@classConsAsat_29 = [u1014 ]; # 17
@classConsAsat_32 = [u1000_u103B_u1015_u103A ]; # 57

lookup dist_advance {
  lookupflag 0;
    pos [@classConsAsat_05]'  7                u1037 u103A; # 
    pos [@classConsAsat_05]'  7                      u103A; # 1283
    pos [@classConsAsat_10]'  7                u1037 u103A; # 
    pos [@classConsAsat_10]'  7                      u103A; # 31
    pos [@classConsAsat_13]'  3                u1037 u103A; # 
    pos [@classConsAsat_13]'  3                      u103A; # 45
    pos [@classConsAsat_19]' 10                u1037 u103A; # 
    pos [@classConsAsat_19]' 10                      u103A; # 1305
    pos [@classConsAsat_29]' 79  [u1032 u1036] u1037 u103A; # 
    pos [@classConsAsat_29]'143                u1037 u103A; # 64
    pos [@classConsAsat_29]' 17                      u103A; # 65
    pos [@classConsAsat_32]' 57                           ; # 137 2678
    pos u102B         u100C' 10                      u103A; # 
    
    pos u1031      u1014'  79                                u1037; # 1096 - for reordered 1031
    pos u1014     [u1032 u1036]                         u1037'  79; # 1098 1103
    pos u1031      u101B' 187                                u1037; # 1986 - for reordered 1031
    pos u101B     [u1032 u1036]                         u1037' 187; # 1989, 1994
    pos u101B.alt  u103D        [u1032 u1036]           u1037' 217; # 2077, 2079, 3354 
    pos u101B.alt [u103D u103D u103D_u103E u103E_u102F] u1037' 217; # 2073, 2138, 3351, 3375
    pos u101B.alt [u103E_u102F] [u102D u1036]           u1037' 217; # 2105, 2133, 2140
    
    pos u101B.alt'  217    u102D  u102F.med             u1037;      # 1996
    pos u101B.long' 217    u103E                        u1037;      # 2098, 3362
    
    pos u102B                                           u1037'  48; # 390, 462, 470, 1003, 1219, 1233, 2805, 3098
    
    pos [u103B u103B_u103E] [u102D u1036] u102F         u1037' 218; # 115, 142, 293, 324, 1350, 1588, 1880, 2295, 2762
    pos  u103B              [u1032 u1036]               u1037' 163; # 113, 288, 
    pos  u103B' 109          u1002                  u1003.med     ; # 1591 
    
    pos u103C                u1014.alt' 52          u1012.med     ; # 545, 575, 713, 1948, 3638
} dist_advance; 
# ----------------------------------------------------------------------

# ****
# mark
# ****

# Special mkmk lookup to correct some rules in the base_LM_mark lookup 
# where certain upper marks or re-ordered glyphs are present
# !! A mkmk lookup but it must come before lookup extend_base_L_base !!

@classmk2mkLM = [u102F.med u1030.med u1037 u103B u103D u103D_u103E 
    u103D_u108D u103E u103E_u102F u103E_u1030];

lookup mk2mk_LM {
  lookupflag UseMarkFilteringSet @classmk2mkLM;
  markClass [u1037] <anchor -107 -53> @LM;
  pos mark [u102F.med] <anchor 99 -53> mark @LM;
  pos mark [u1030.med] <anchor 99 -53> mark @LM;
  pos mark [u103D] <anchor 106 -53> mark @LM;
  pos mark [u103D_u103E] <anchor 82 -53> mark @LM;
  pos mark [u103D_u108D] <anchor 106 -53> mark @LM;
  pos mark [u103E] <anchor 57 -53> mark @LM;
  pos mark [u103E_u102F] <anchor 16 -53> mark @LM;
  pos mark [u103E_u1030] <anchor 17 -53> mark @LM;
} mk2mk_LM;


# We're actually overriding the (later) base_LL_base autogenerated  
# lookup and pointing it back to the base_L_base
lookup extend_base_L_base {
  lookupflag 0;
  markClass [\u1037] <anchor -107 -53> @L;
  pos base [u1009] <anchor 304 -53> mark @L;
  pos base [u101B] <anchor 748 -53> mark @L;
  pos base [u101B.alt] <anchor 753 -53> mark @L;
  pos base [u101B.long] <anchor 756 -53> mark @L;
  pos base [u1025] <anchor 280 -53> mark @L;
  pos base [u102C] <anchor 133 -53> mark @L;
  pos base [u103B] <anchor 331 -53> mark @L;
} extend_base_L_base;


# ****
# mkmk
# ****



# ----------------------------------------------------------------------
# GPOS features
# 
# Be sure to add new lookups to the list in the padauk_features.fea file
# ----------------------------------------------------------------------

include(../font-source/padauk-mym2_features.fea)

