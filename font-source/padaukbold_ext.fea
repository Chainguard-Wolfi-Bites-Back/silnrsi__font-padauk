# An extension of the autogenerated padaukbold.fea
# To fix autogenerated GPOS lookups
# To add GPOS lookups that can't easily be autogenerated

# Include GSUB lookups here - because FontForge expects it here
# This lets us work on kerning and adjusting distances with ligatures
# that have been formed in GSUB

include(../font-source/padauk-mym2_GSUB.fea)


# -------------
# GPOS lookups
# -------------

# --- NOTE on 103C and variants ----------------------------------------
# The source fonts have u103C and variants classed as base glyphs. 
# I have classified them as marks in the GDEF table. 
# They need to be mark glyphs so they can ligate with u102F and u1030 
# across a base glyph (remember u103C is reordered before lookups 
# are applied. Since OTLS zeros out the width of marks, 
# *now they need advance width added* which we do here.

# NB: The autogenerated files have them in the GPOS lookups as base 
# glyphs which generates a non-fatal (glyph order) error.

# 2015-04-04, I tried changing u103C and related glyphs to marks in the 
# source but it kept corrupting the font so I just changed it in the 
# GDEF table. (See padauk-mym2_features.fea)
#-----------------------------------------------------------------------

# Adding advanced width for spacing marks (defined as such in GDEF)
lookup dist_SpacingMarks {
  lookupflag 0;
    pos u103C <0 0 214 0>;
    pos u103C.alt.narr <0 0 214 0>;
    pos u103C.alt.wide <0 0 214 0>;
    pos u103C.wide <0 0 214 0>;
    pos u103C_u103D.narr <0 0 214 0>;
    pos u103C_u103D.wide <0 0 214 0>;
    pos u103C_u103D.alt.narr <0 0 214 0>;
    pos u103C_u103D.alt.wide <0 0 214 0>;
    pos u103C_u102F.narr <0 0 214 0>;
    pos u103C_u102F.wide <0 0 214 0>;
    pos u103C_u102F.alt.narr <0 0 214 0>;
    pos u103C_u102F.alt.wide <0 0 214 0>;
    pos u103C_u103D.alt.narr.tri <0 0 214 0>;
    pos u103C_u103D.alt.wide.tri <0 0 214 0>;
    pos u103C_u103D.narr.tri <0 0 214 0>;
    pos u103C_u103D.wide.tri <0 0 214 0>;
    # Glyph u1062 classified as mark in GDEF for Shan 
    # so a u1086 coming after u1062 can ignore u1062 and attach to cons
    pos u1062 <0 0 313 0>; 
    # Sneak this in here for Shan u1081 - #3334
    # Rendering engines apparently don't recognize this letter *yet* so this rule
    # may need to be removed later. (Diacritic attachment not happening either.)
    pos u1081 <0 0 575 0>; 
} dist_SpacingMarks; 

# Normally u1037 attaches to u103D or u102F. But when the latter two
# become part of a 103C ligature, they become reordered before a 
# consonant and the attachment breaks. (I've had no luck in fixing it.) 
# This 'hack' gets it close to where it should be.
### NB: Some configurations and advance width still need to be adjusted
lookup kern_103Clig_1037 {
  lookupflag 0;
    pos u103C_u103D.narr     [@cCons] [@cUDia] u1037' <359 0 0 0>;
    pos u103C_u103D.narr     [@cCons]          u1037' <359 0 212 0>; #1425
#    pos u103C_u103D.wide     [@cCons] [@cUDia] u1037' <0 0 0 0>;
#    pos u103C_u103D.wide     [@cCons]          u1037' <0 0 0 0>;
#    pos u103C_u103D.alt.narr [@cCons] [@cUDia] u1037' <0 0 0 0>;
#    pos u103C_u103D.alt.narr [@cCons]          u1037' <0 0 0 0>;
#    pos u103C_u103D.alt.wide [@cCons] [@cUDia] u1037' <0 0 0 0>;
#    pos u103C_u103D.alt.wide [@cCons]          u1037' <0 0 0 0>;
    pos u103C_u102F.narr     [u1016]   u1036   u1037' <368 0 222 0>; #1527
    pos u103C_u102F.narr     [@cCons] [@cUDia] u1037' <367 0 221 0>; #1830
    pos u103C_u102F.narr     [@cCons]          u1037' <367 0 0 0>;
#    pos u103C_u102F.wide    [@cCons] [@cUDia] u1037' <0 0 0 0>;
#    pos u103C_u102F.wide     [@cCons]          u1037' <0 0 0 0>;
    pos u103C_u102F.alt.narr [u1017]   u102D   u1037' <368 0 221 0>; #1605
    pos u103C_u102F.alt.narr [@cCons] [@cUDia] u1037' <367 0 221 0>; #1805
    pos u103C_u102F.alt.narr [@cCons]          u1037' <367 0 0 0>;
    pos u103C_u102F.alt.wide [@cCons] [@cUDia] u1037' <339 0 195 0>; # 163
    pos u103C_u102F.alt.wide [@cCons]          u1037' <309 0 0 0>;
} kern_103Clig_1037;

#-----------------------------------------------------------------------
# Additional dist needed for some cons to clear 103C
#@class103CConsNarr_05 = [u1001 ]; # 
#@class103CConsNarr_13 = [u1004 ]; # 
#@class103CConsNarr_47 = [u1012 ]; # 
#@class103CConsWide_05 = [u1010 ]; # 
#@class103CConsWide_25 = [u1000 ]; # 

#@class103CNarr = [u103C      u103C.alt.narr u103C_u103D.narr u103C_u103D.alt.narr u103C_u102F.narr u103C_u102F.alt.narr]; 
#@class103CWide = [u103C.wide u103C.alt.wide u103C_u103D.wide u103C_u103D.alt.wide u103C_u102F.wide u103C_u102F.alt.wide]; 

lookup dist_103C_Cons {
  lookupflag 0;
#    pos [@class103CNarr] [@class103CConsNarr_05]'  5 [@cUDia]; # 327-350 376-378; Not needed for Bold
#    pos [@class103CNarr] [@class103CConsNarr_05]'  5         ; # 327-350 376-378; Not needed for Bold
#    pos [@class103CNarr] [@class103CConsNarr_13]' 13 [@cUDia]; # 495-508; Not needed for Bold
#    pos [@class103CNarr] [@class103CConsNarr_13]' 13         ; # 495-508; Not needed for Bold
#    pos [@class103CNarr] [@class103CConsNarr_47]' 47 [@cUDia]; # 1058-1060; Not needed for Bold
#    pos [@class103CNarr] [@class103CConsNarr_47]' 47         ; # 1058-1060; Not needed for Bold
#    pos [@class103CWide] [@class103CConsWide_05]'  5 [@cUDia]; # 900, 901, 903; Not needed for Bold
#    pos [u103C.wide]     [@class103CConsWide_05]'  5         ; # 898, 899, 902; Not needed for Bold
#    pos [@class103CNarr] [u1016]'                  0 [@cUDia]; # 1499-1526, 1528); Bookbold ONLY
#    pos [@class103CNarr] [u1016]'                  0         ; # 1499-1526, 1528); Bookbold ONLY
    pos u103C.alt.wide          u1000' 0     u1004.kinzi_u1036; # 549; Not needed for Bold
} dist_103C_Cons;
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# This section deals with 101B and some lower diacritics

# Adding LSB to ensure that the lower diacritic doesn't protrude 
# backwards into a previous cluster.
# Adding RSB to ensure that the next *base* glyph is spaced correctly
lookup dist_101Balt {
  lookupflag 0;
    pos u101B.alt' <100 0 100 0> u103E_u1030;
    pos u101B.alt' <88 0 88 0>   u103E_u102F;
    pos u101B.alt' <53 0 53 0>   u1030.med;
    pos u101B.alt' <12 0 12 0>   u102F.med;
    # OTLS re-orders marks
    pos u101B.alt' <12 0 12 0>   [u1032 u1036] u102F.med;
} dist_101Balt;

# Since OTLS zeros out the width of marks the width of 101B.alt doesn't
# affect them. We need to explicitly adjust width for them to kern.
lookup kern_101Balt {
  lookupflag 0;
    pos u101B.alt u103E_u1030' <-90 0 0 0>;
    pos u101B.alt u103E_u102F' <-78 0 0 0>;
    pos u101B.alt u1030.med'   <-43 0 0 0>;
    pos u101B.alt u102F.med'   <-2 0 0 0>;
    # OTLS re-orders marks
#    pos u101B.alt [u1032 u1036] u102F.med' <-2 0 0 0>;
} kern_101Balt;

# Not sure why this doesn't work but it's no big deal - only 2 points.
lookup pos_101Balt_1036 {
  lookupflag 0;
    pos u102F.med' <-2 0 0 0>; # OTLS re-orders marks
} pos_101Balt_1036;

lookup kern_101Balt_1036 {
  lookupflag 0;
    pos u101B.alt u1036 u102F.med' lookup pos_101Balt_1036; 
} kern_101Balt_1036;
#-----------------------------------------------------------------------

lookup kern_misc {
  lookupflag 0;
    pos [u1001 u1002]' 135 [u1004.kinzi] u102B; # 2425 Shifts 102B away from 1004.kinzi
    pos u1002'     58  u1004.kinzi_u102D u101F; # 2433 Shifts 101F/
#    pos u1002'     135 [u1004.kinzi] u102B;
    pos u1014.alt' 107 [u1010.med]   u102F; # 412
    pos u1014.alt' 112 [u1011.med]   u1014.alt [u1010.med]; # 414
    pos u1014.alt'  16 [u103D]       u1014.alt [u1010.med]; # 1175
    
    pos u1017'     101  u1018.med    u1014.alt  u1010.med ; # 3647/
    pos u1017'     101  u1018.med    u102F    ; # 3646/
    pos u1019'     103  u1018.med    u1030    ; # 1953/
    
    pos u101B'     107  u1005      [@cMedWide]; # 2020/
    pos u101B'     115  u1014.alt  [@cMedWide]; # 2045/
    
    pos u1032'     135  u102B; # Mon language plus maybe others
    
    pos u103B'      94  u1002           u1003.med; # 1591
    pos u103B           u102D' <189 0 0 0>  u102F;          # 114-116 Shifts 102D over stem of 103B
    
    pos u103C.alt.narr [u1017 ]'  95 u102D [@cCons]; # 1611
    pos u103C.wide     [@cCons]' 147 u102B;
    pos u103C          [@cCons]' 135 u102B;
    
    pos u1014 u1037'  79 u1063; # KSW (Sgaw Karen) language
    pos u101B u1037' 187 u1063; # KSW (Sgaw Karen) language
    pos u103B u1037' 180 u1063; # KSW (Sgaw Karen) language
    pos u1061 u1037' 180 u1063; # KSW (Sgaw Karen) language
} kern_misc; 

# This is a Mon language sequence
# This sequence can not be reordered easily in OT but this rule works 
# for the all the words I can find. It may need to be refined.
lookup kern_TallAA {
  lookupflag 0;
    pos u102B' <135 0 0 0> u1036' <-341 0 0 0>;
} kern_TallAA;

# OTLS reordered the pair so now we kern to make it appear to attach
# 
# 
lookup kern_reorderedMarks {
  lookupflag 0;
    pos u1011.med u1036' <296 0 0 0> u102F; # 867/
    pos u1025     u1036' <310 0 0 0> u102F; # 3656/
    pos u103B     u1036' <-58 0 0 0> u102F; # 141-143, 324, 325, 446, 2679/
    pos u103E.alt u1036' <301 0 0 0> u102F; # 1892/
    
    pos u1001 u1004.kinzi_u102D' <191 0 0 0> u103B; # 2430/
    
    pos u1000 u1004.kinzi_u102E' <93 0 0 0> u103B; # 3581/
} kern_reorderedMarks;

# Input sequence is u102F u1032 with u1032 attaching at U 
# OTLS reordered the pair so now we kern to make it appear to attach
# Adding 172 to LSB works for many but may need contextual rules for precise placement
# feature disabled
lookup kern_102F_1032 {
  lookupflag 0;
    pos u1032' <197 0 0 0> u102F;
} kern_102F_1032;

# ----------------------------------------------------------------------
# Clean up of advance width
# Make this the last "dist" lookup

@classConsAsat_00 = [u1000 u1005 u100A u1010 u1015 u1019 u101A u1025 u101E ];
@classConsAsat_05 = [u100C ]; # 8 (removed u101C, see line 246)
@classConsAsat_10 = [u1004 u100B ]; # 8
@classConsAsat_13 = [u100F ]; # 6
@classConsAsat_19 = [u1012 ]; # 13
@classConsAsat_29 = [u1014 ]; # 21
@classConsAsat_32 = [u1000_u103B_u1015_u103A ]; # 28

lookup dist_advance {
  lookupflag 0;
    pos u102B         u100C'  8                      u103A; # 1283
    
    pos [@classConsAsat_05]'  5  u1082         u1037 u103A; # Shan #1492
    pos [@classConsAsat_05]'  8                u1037 u103A; #
    pos [@classConsAsat_05]'  8                      u103A; #
    pos [@classConsAsat_10]'  8                u1037 u103A; #
    pos [@classConsAsat_10]'  8                      u103A; # 31
    pos [@classConsAsat_13]'  6                u1037 u103A; #
    pos [@classConsAsat_13]'  6                      u103A; # 45
    pos [@classConsAsat_19]' 13                u1037 u103A; #
    pos [@classConsAsat_19]' 13                      u103A; # 1305
    pos [@classConsAsat_29]' 71  [u1032 u1036] u1037 u103A; # 
    pos [@classConsAsat_29]'122                u1037 u103A; # 64
    pos [@classConsAsat_29]' 21                      u103A; # 65
    pos [@classConsAsat_32]' 28                           ; # 137, 2678
    pos [u101C]            '  1                      u103A; # 415, 881
    
    pos u1002' 58  u1004.kinzi_u102E; # 2441 adv width/
    pos u1010' 56  u102D_u1036      ; # 886
    
    pos u1031      u1014' 122                                u1037; # 1096 - for reordered u1031
    pos u1014     [u1032 u1036]                         u1037' 122; # 1098 1103
    pos u1031      u101B' 187                                u1037; # 1986 - for reordered u1031
    pos u101B     [u1032 u1036]                         u1037' 187; # 1989, 1994
    pos u101B.alt  u103D        [u1032 u1036]           u1037' 217; # 2077, 2079, 3354 
    pos u101B.alt [u103D u103D u103D_u103E u103E_u102F] u1037' 217; # 2073, 2138, 3351, 3375
    pos u101B.alt [u103E_u102F] [u102D u1036]           u1037' 217; # 2105, 2133, 2140
    
    pos u101B.alt'  217    u102D  u102F.med             u1037;      # 1996
    pos u101B.long' 217    u103E                        u1037;      # 2098, 3362
    
    pos u102B                                           u1037'  49; # 390, 462, 470, 1003, 1219, 1233, 2805, 3098
    
    pos [u103B u103B_u103E] [u102D u1036] u102F         u1037' 226; #m 115, 142, 293, 324, 1350, 1588, 1880, 2295, 2762
    pos  u103B              [u1032 u1036]               u1037' 197; # 113, 288,
    pos  u106B                                          u1037'  48; # PWO - pwo_syllables.txt
    
#    pos u103C                u1014.alt'  0          u1012.med     ; # 545, 575, 713, 1948, 3638; Not needed for Bold
} dist_advance; 
# ----------------------------------------------------------------------

# ****
# mark
# ****

# Special mkmk lookup to correct some rules in the base_LM_mark lookup 
# where certain upper marks or re-ordered glyphs are present
# !! A mkmk lookup but it must come before lookup extend_base_L_base !!

@classmk2mkLM = [u1010.med u102F.med u1030.med u1037 u103B u103D u103D_u103E 
    u103D_u108D u103E u103E_u102F u103E_u1030];

lookup mk2mk_LM {
  lookupflag UseMarkFilteringSet @classmk2mkLM;
  markClass [u1037] <anchor -96 -53> @LM;
  pos mark [u1010.med] <anchor 104 -53> mark @LM; # 2195/
  pos mark [u102F.med] <anchor 96 -53> mark @LM;
  pos mark [u1030.med] <anchor 96 -53> mark @LM;
  pos mark [u103D] <anchor 100 -53> mark @LM;
  pos mark [u103D_u103E] <anchor 84 -53> mark @LM;
  pos mark [u103D_u108D] <anchor 100 -53> mark @LM;
  pos mark [u103E] <anchor 105 -53> mark @LM;
  pos mark [u103E_u102F] <anchor 17 -53> mark @LM;
  pos mark [u103E_u1030] <anchor 18 -53> mark @LM;
} mk2mk_LM;

# This lookup excluively for KSW (Sgaw Karen) language
# It attaches u1037 to the left of any lower diacritic
# !! This needs to come after lookup mkmk_LM to override the AP !!
lookup kern_KSW_LLMark {
  lookupflag 0;
  pos u1030.med    u1037' <-559 0 0 0>;
  pos u103D.tri    u1037' <-325 0 0 0>;
  pos u103E.slanth u1037' <-240 0 0 0>;
} kern_KSW_LLMark;

# We're actually overriding the (later) base_LL_base autogenerated  
# lookup and pointing it back to the base_L_base
lookup extend_base_L_base {
  lookupflag 0;
  markClass [u1037] <anchor -96 -53> @L;
  pos base [u1009] <anchor 295 -53> mark @L;
  pos base [u101B] <anchor 714 -53> mark @L;
  pos base [u101B.alt] <anchor 728 -53> mark @L;
  pos base [u101B.long] <anchor 730 -53> mark @L;
  pos base [u1025] <anchor 279 -53> mark @L;
  pos base [u102C] <anchor 133 -53> mark @L;
  pos base [u103B] <anchor 304 -53> mark @L;
} extend_base_L_base;


# ****
# mkmk
# ****



# ----------------------------------------------------------------------
# GPOS features
# 
# Be sure to add new lookups to the list in the padauk-mym2_features.fea file
# ----------------------------------------------------------------------

include(../font-source/padauk-mym2_features.fea)

