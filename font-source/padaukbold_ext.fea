# An extension of the autogenerated padaukbold.fea
# To fix autogenerated GPOS lookups
# To add GPOS lookups that can't easily be autogenerated

# Include GSUB lookups here - because FontForge expects it here
# This lets us work on kerning and adjusting distances with ligatures
# that have been formed in GSUB

include(../../font-source/padauk-mym2_GSUB.fea)


# -------------
# GPOS lookups
# -------------

# --- NOTE on 103C and variants ----------------------------------------
# The source fonts have u103C and variants classed as base glyphs. 
# I have classified them as marks in the GDEF table. 
# They need to be mark glyphs so they can ligate with u102F and u1030 
# across a base glyph (remember u103C is reordered before lookups 
# are applied. Since OTLS zeros out the width of marks, 
# *now they need advance width added* which we do here.

# NB: The autogenerated files have them in the GPOS lookups as base 
# glyphs which generates a non-fatal (glyph order) error.

#-----------------------------------------------------------------------

# Adding advanced width for spacing marks (defined as marks in GDEF)
lookup dist_SpacingMarks {
  lookupflag 0;
    pos u103C <0 0 214 0>;
    pos u103C.alt.narr <0 0 214 0>;
    pos u103C.alt.wide <0 0 214 0>;
    pos u103C.wide <0 0 214 0>;
    pos u103C_u103D.narr <0 0 214 0>;
    pos u103C_u103D.wide <0 0 214 0>;
    pos u103C_u103D.alt.narr <0 0 214 0>;
    pos u103C_u103D.alt.wide <0 0 214 0>;
    pos u103C_u102F.narr <0 0 214 0>;
    pos u103C_u102F.wide <0 0 214 0>;
    pos u103C_u102F.alt.narr <0 0 214 0>;
    pos u103C_u102F.alt.wide <0 0 214 0>;
    pos u103C_u103D.alt.narr.tri <0 0 214 0>;
    pos u103C_u103D.alt.wide.tri <0 0 214 0>;
    pos u103C_u103D.narr.tri <0 0 214 0>;
    pos u103C_u103D.wide.tri <0 0 214 0>;
    # AA70 is a spacing mark in isolated form
    pos uAA70 <0 0 574 0>;
} dist_SpacingMarks; 

lookup dist_dflt_SpacingMarks {
  lookupflag 0;
    pos u103C @cCons' <214 0 214 0>;
    pos u103C.alt.narr @cCons' <214 0 214 0>;
    pos u103C.alt.wide @cCons' <214 0 214 0>;
    pos u103C.wide @cCons' <214 0 214 0>;
    pos u103C_u103D.narr @cCons' <214 0 214 0>;
    pos u103C_u103D.wide @cCons' <214 0 214 0>;
    pos u103C_u103D.alt.narr @cCons' <214 0 214 0>;
    pos u103C_u103D.alt.wide @cCons' <214 0 214 0>;
    pos u103C_u102F.narr @cCons' <214 0 214 0>;
    pos u103C_u102F.wide @cCons' <214 0 214 0>;
    pos u103C_u102F.alt.narr @cCons' <214 0 214 0>;
    pos u103C_u102F.alt.wide @cCons' <214 0 214 0>;
    pos u103C_u103D.narr.tri @cCons' <214 0 214 0>;
    pos u103C_u103D.wide.tri @cCons' <214 0 214 0>;
    pos u103C_u103D.alt.narr.tri @cCons' <214 0 214 0>;
    pos u103C_u103D.alt.wide.tri @cCons' <214 0 214 0>;
    pos uAA70 @cCons' <574 0 574 0>;
} dist_dflt_SpacingMarks;

# Normally u1037 attaches to u103D or u102F. But when the latter two
# become part of a 103C ligature, they become reordered before a 
# consonant and the attachment breaks.
# This 'hack' gets it close to where it should be.
### NB: Some configurations and advance width still need to be adjusted
lookup kern_103Clig_1037 {
  lookupflag 0;
    pos u103C_u103D.narr     [@cCons] [@cUDia] u1037' <359 0 0 0>;
    pos u103C_u103D.narr     [@cCons]          u1037' <359 0 212 0>; #1425
#    pos u103C_u103D.wide     [@cCons] [@cUDia] u1037' <0 0 0 0>;
#    pos u103C_u103D.wide     [@cCons]          u1037' <0 0 0 0>;
#    pos u103C_u103D.alt.narr [@cCons] [@cUDia] u1037' <0 0 0 0>;
#    pos u103C_u103D.alt.narr [@cCons]          u1037' <0 0 0 0>;
#    pos u103C_u103D.alt.wide [@cCons] [@cUDia] u1037' <0 0 0 0>;
#    pos u103C_u103D.alt.wide [@cCons]          u1037' <0 0 0 0>;
    pos u103C_u102F.narr     [u1016]   u1036   u1037' <368 0 222 0>; #1527
    pos u103C_u102F.narr     [@cCons] [@cUDia] u1037' <367 0 221 0>; #1830
    pos u103C_u102F.narr     [@cCons]          u1037' <367 0 0 0>;
#    pos u103C_u102F.wide    [@cCons] [@cUDia] u1037' <0 0 0 0>;
#    pos u103C_u102F.wide     [@cCons]          u1037' <0 0 0 0>;
    pos u103C_u102F.alt.narr [u1001]   u102D   u1037' <370 0 224 0>; # BLK #498-99
    pos u103C_u102F.alt.narr [u1015]   u102D   u1037' <368 0 221 0>; # BLK #2017, 4840
    pos u103C_u102F.alt.narr [u1016]   u102D   u1037' <368 0 222 0>; # BLK #2249, 4939
    pos u103C_u102F.alt.narr [u1017]   u102D   u1037' <368 0 221 0>; #1605
    pos u103C_u102F.alt.narr [@cCons] [@cUDia] u1037' <367 0 221 0>; #1805
    pos u103C_u102F.alt.narr [@cCons]          u1037' <367 0 0 0>;
    pos u103C_u102F.alt.wide [@cCons] [@cUDia] u1037' <339 0 195 0>; # 163
    pos u103C_u102F.alt.wide [@cCons]          u1037' <309 0 0 0>;
} kern_103Clig_1037;

lookup dflt_kern_103Clig_1037 {
  lookupflag 0;
    pos u103C_u103D.narr     [@cCons] [@cUDia] u1037' <359 0 212 0>;
    pos u103C_u103D.narr     [@cCons]          u1037' <359 0 212 0>; #1425
    pos u103C_u103D.wide     [@cCons] [@cUDia] u1037' <359 0 212 0>;
    pos u103C_u103D.wide     [@cCons]          u1037' <359 0 212 0>;
#    pos u103C_u103D.alt.narr [@cCons] [@cUDia] u1037' <0 0 0 0>;
#    pos u103C_u103D.alt.narr [@cCons]          u1037' <0 0 0 0>;
#    pos u103C_u103D.alt.wide [@cCons] [@cUDia] u1037' <0 0 0 0>;
#    pos u103C_u103D.alt.wide [@cCons]          u1037' <0 0 0 0>;
    pos u103C_u102F.narr     [u1016]   u1036   u1037' <368 0 222 0>; #1527
    pos u103C_u102F.narr     [@cCons] [@cUDia] u1037' <367 0 221 0>; #1830
    pos u103C_u102F.narr     [@cCons]          u1037' <367 0 0 0>;
#    pos u103C_u102F.wide     [@cCons] [@cUDia] u1037' <0 0 0 0>;
#    pos u103C_u102F.wide     [@cCons]          u1037' <0 0 0 0>;
    pos u103C_u102F.alt.narr [u1001]   u102D   u1037' <370 0 224 0>; # BLK #498-99
    pos u103C_u102F.alt.narr [u1015]   u102D   u1037' <368 0 221 0>; # BLK #2017, 4840
    pos u103C_u102F.alt.narr [u1016]   u102D   u1037' <368 0 222 0>; # BLK #2249, 4939
    pos u103C_u102F.alt.narr [u1017]   u102D   u1037' <368 0 221 0>; #1605
    pos u103C_u102F.alt.narr [@cCons] [@cUDia] u1037' <367 0 221 0>; #1805
    pos u103C_u102F.alt.narr [@cCons]          u1037' <367 0 0 0>;
    pos u103C_u102F.alt.wide [@cCons] [@cUDia] u1037' <339 0 195 0>; # 163
    pos u103C_u102F.alt.wide [@cCons]          u1037' <309 0 0 0>;
} dflt_kern_103Clig_1037;

#-----------------------------------------------------------------------
# This section deals with 101B and some lower diacritics

# Adding LSB to ensure that the lower diacritic doesn't protrude 
# backwards into a previous cluster.
# Adding RSB to ensure that the next *base* glyph is spaced correctly
lookup dist_101Balt {
  lookupflag 0;
    pos u101B.alt' <100 0 100 0> u103E_u1030' <-90 0 0 0>;
    pos u101B.alt' <88 0 88 0>   u103E_u102F' <-78 0 0 0>;
    pos u101B.alt' <53 0 53 0>   u1030.med'   <-43 0 0 0>;
    pos u101B.alt' <12 0 12 0>   u102F.med'   <-2 0 0 0>;
    
    pos u101B.alt' <12 0 12 0>   [u1032 u1036] u102F.med' <-2 0 0 0>;
} dist_101Balt;
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Input sequence is "cons. u102F u1032" with u1032 attaching to the cons.
lookup shift_1032 {
  lookupflag 0;
    pos u100D u102F u1032' <-211 0 0 0>; #MNW #865
    pos u1025 u102F u1032' <-196 0 0 0>; #MNW #3014
    pos u105D u102F u1032' <-198 0 0 0>; #MNW #3104
    pos u103B u102F u1032' <-130 0 0 0>; #MNW #1660
    pos u100F_u100D u102F u1032' <-181 0 0 0>; #BLK #2634
} shift_1032;


# ****
# mark
# ****

# Special mkmk lookup to correct some rules in the base_LM_mark lookup 
# where certain upper marks or re-ordered glyphs are present
# !! A mkmk lookup but it must come before lookup extend_base_L_base !!

@classmk2mkLM = [u1010.med u102F.med u1030.med u1037 u103B u103D u103D_u103E 
    u103D_u108D u103E u103E_u102F u103E_u1030];

lookup mk2mk_LM {
  lookupflag UseMarkFilteringSet @classmk2mkLM;
  markClass [u1037] <anchor -96 -53> @LM;
  pos mark [u1010.med] <anchor 106 -53> mark @LM; # 2195
  pos mark [u102F.med] <anchor 96 -53> mark @LM;
  pos mark [u1030.med] <anchor 96 -53> mark @LM;
  pos mark [u103D] <anchor 100 -53> mark @LM;
  pos mark [u103D_u103E] <anchor 84 -53> mark @LM;
  pos mark [u103D_u108D] <anchor 100 -53> mark @LM;
  pos mark [u103E] <anchor 105 -53> mark @LM;
  pos mark [u103E_u102F] <anchor 17 -53> mark @LM;
  pos mark [u103E_u1030] <anchor 18 -53> mark @LM;
} mk2mk_LM;

# We're actually overriding the (later) base_LL_base autogenerated  
# lookup and pointing it back to the base_L_base
lookup extend_base_L_base {
  lookupflag 0;
  markClass [u1037] <anchor -96 -53> @L;
  pos base [u1009] <anchor 295 -53> mark @L;
  pos base [u101B] <anchor 714 -53> mark @L;
  pos base [u101B.alt] <anchor 728 -53> mark @L;
  pos base [u101B.long] <anchor 730 -53> mark @L;
  pos base [u1025] <anchor 279 -53> mark @L;
  pos base [u102C] <anchor 133 -53> mark @L;
  pos base [u103B] <anchor 304 -53> mark @L;
} extend_base_L_base;

# This lookup excluively for KSW (Sgaw Karen) language
# It attaches u1037 to the left of any lower diacritic
# !! This needs to come after mark and mkmk lookups to override the AP !!
# Sometimes RSB value added to negate adv width rule when u1037 is on the right
lookup dist_KSW_shift1037 {
  lookupflag 0;
  pos u101B        u1037' <-457 0 -230 0>;
#  pos u1030.med    u1037' <-559 0 0 0>;
  pos u103B        u1037' <-678 0 -197 0>;
#  pos u103D.tri    u1037' <-325 0 0 0>;
#  pos u103E.slanth u1037' <-240 0 0 0>;
  pos u1061        u1037' <-481 0 -242 0>;
} dist_KSW_shift1037;

lookup dflt_dist_KSW_shift1037 {
  lookupflag 0;
  pos u101B' -230        u1037' <-457 0 0 0>;
  pos u1030.med    u1037' <-559 0 0 0>;
  pos u103B' -197        u1037' <-678 0 0 0>;
  pos u103D.tri    u1037' <-325 0 0 0>;
  pos u103E.slanth u1037' <-240 0 0 0>;
  pos u1061' -242        u1037' <-481 0 0 0>;
} dflt_dist_KSW_shift1037;


# ****
# mkmk
# ****


# ----------------------------------------------------------------------
# GPOS features
# 
# Be sure to add new lookups to the list in the padauk-mym2_features.fea file
# ----------------------------------------------------------------------

include(../../font-source/padauk-mym2_features.fea)

